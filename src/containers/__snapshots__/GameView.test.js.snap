// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests for GameView container renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameView
    endTurn={[Function]}
    gameState={
      Object {
        "battleCardActive": false,
        "cardsToTake": 1,
        "chosenType": "",
        "chosenWeight": "",
        "cpuPlayer": Object {
          "cards": Array [],
          "wait": 0,
        },
        "deck": Array [],
        "firstCardChecked": false,
        "gameOver": false,
        "isPlayerTurn": 0,
        "jackActive": 0,
        "pile": Array [],
        "player": Object {
          "cards": Array [],
          "wait": 0,
        },
        "waitTurn": 0,
        "winner": 0,
      }
    }
    hideModal={[Function]}
    makePlayerMove={[Function]}
    playSound={[Function]}
    restartGame={[Function]}
    showModal={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    takeCards={[Function]}
    updateGameFactor={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Connect(Modals)
          restartGame={[Function]}
        />,
        <div
          className="confetti"
        >
          <Confetti
            active={true}
            config={
              Object {
                "angle": 90,
                "decay": 0.9,
                "elementCount": 30,
                "spread": 80,
                "startVelocity": 50,
              }
            }
          />
        </div>,
        <Connect(Header)
          restartGame={[Function]}
        />,
        <CpuPlayer
          cpuPlayer={
            Object {
              "cards": Array [],
              "wait": 0,
            }
          }
        />,
        <div
          className="flex-container middle cards-container"
        >
          <Deck
            cardsInDeck={0}
            firstCardChecked={false}
            isPlayerTurn={0}
            playerCanMove={true}
            takeCard={[Function]}
          />
          <Pile
            cards={Array []}
          />
          <Connect(Icons) />
        </div>,
        <Connect(Player) />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "restartGame": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Confetti
            active={true}
            config={
              Object {
                "angle": 90,
                "decay": 0.9,
                "elementCount": 30,
                "spread": 80,
                "startVelocity": 50,
              }
            }
          />,
          "className": "confetti",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "config": Object {
              "angle": 90,
              "decay": 0.9,
              "elementCount": 30,
              "spread": 80,
              "startVelocity": 50,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "restartGame": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "cpuPlayer": Object {
            "cards": Array [],
            "wait": 0,
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Deck
              cardsInDeck={0}
              firstCardChecked={false}
              isPlayerTurn={0}
              playerCanMove={true}
              takeCard={[Function]}
            />,
            <Pile
              cards={Array []}
            />,
            <Connect(Icons) />,
          ],
          "className": "flex-container middle cards-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "cardsInDeck": 0,
              "firstCardChecked": false,
              "isPlayerTurn": 0,
              "playerCanMove": true,
              "takeCard": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "cards": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Connect(Modals)
            restartGame={[Function]}
          />,
          <div
            className="confetti"
          >
            <Confetti
              active={true}
              config={
                Object {
                  "angle": 90,
                  "decay": 0.9,
                  "elementCount": 30,
                  "spread": 80,
                  "startVelocity": 50,
                }
              }
            />
          </div>,
          <Connect(Header)
            restartGame={[Function]}
          />,
          <CpuPlayer
            cpuPlayer={
              Object {
                "cards": Array [],
                "wait": 0,
              }
            }
          />,
          <div
            className="flex-container middle cards-container"
          >
            <Deck
              cardsInDeck={0}
              firstCardChecked={false}
              isPlayerTurn={0}
              playerCanMove={true}
              takeCard={[Function]}
            />
            <Pile
              cards={Array []}
            />
            <Connect(Icons) />
          </div>,
          <Connect(Player) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "restartGame": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Confetti
              active={true}
              config={
                Object {
                  "angle": 90,
                  "decay": 0.9,
                  "elementCount": 30,
                  "spread": 80,
                  "startVelocity": 50,
                }
              }
            />,
            "className": "confetti",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "config": Object {
                "angle": 90,
                "decay": 0.9,
                "elementCount": 30,
                "spread": 80,
                "startVelocity": 50,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "restartGame": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "cpuPlayer": Object {
              "cards": Array [],
              "wait": 0,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Deck
                cardsInDeck={0}
                firstCardChecked={false}
                isPlayerTurn={0}
                playerCanMove={true}
                takeCard={[Function]}
              />,
              <Pile
                cards={Array []}
              />,
              <Connect(Icons) />,
            ],
            "className": "flex-container middle cards-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "cardsInDeck": 0,
                "firstCardChecked": false,
                "isPlayerTurn": 0,
                "playerCanMove": true,
                "takeCard": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "cards": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
